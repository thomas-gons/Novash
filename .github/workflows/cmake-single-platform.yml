name: C Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    # Use the matrix variable in the job name for better readability in the UI
    name: Build (${{ matrix.compiler }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # Define the compilers to test
        compiler: [gcc, clang]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libreadline-dev
          # Install clang explicitly if required by the matrix run
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            sudo apt-get install -y clang
          fi

      - name: Configure (Debug with Sanitizers)
        env:
          # Set the compiler environment variable for CMake to use
          CC: ${{ matrix.compiler }}
        run: |
          # Use a unique build directory (e.g., build-gcc or build-clang) 
          # to ensure clean cache separation between compilers in the matrix.
          BUILD_DIR="build-${{ matrix.compiler }}"
          
          # Configure CMake for Debug, relying on CMakeLists.txt to handle CFLAGS and sanitizers.
          # The CMakeLists.txt handles ENABLE_SANITIZERS=ON correctly.
          cmake -S . -B "$BUILD_DIR" \
            -DCMAKE_BUILD_TYPE=Debug \
            -DENABLE_SANITIZERS=ON
            
      - name: Build
        # Build using the unique, configured directory
        run: cmake --build "build-${{ matrix.compiler }}" -j

      - name: ASAN/UBSAN smoke test
        run: |
          echo "Running built binary to confirm sanitizer linkage..."
          # The executable is located at the root of the unique build directory
          EXE_PATH="build-${{ matrix.compiler }}/nsh"
          
          if [ -x "$EXE_PATH" ]; then
            # Run the executable; use '|| true' as the sanitizer might crash on launch
            # if it detects a severe issue, but here we just want to ensure it links.
            "$EXE_PATH" -c "exit 0" || true
            echo "Sanitizer linkage smoke test passed."
          else
            echo "Error: Executable not found at $EXE_PATH. Build failed or path is incorrect."
            exit 1
          fi
          
      - name: List build artifacts
        run: |
          echo "Build output artifacts:"
          ls -la "build-${{ matrix.compiler }}" || true
